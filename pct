#!/usr/bin/python3

from argparse import ArgumentParser

class sym:
   BLACK = '\033[30m'
   PURPLE = '\033[95m'
   CYAN = '\033[96m'
   DARKCYAN = '\033[36m'
   BLUE = '\033[94m'
   DBLUE = '\033[34m'
   GREEN = '\033[92m'
   YELLOW = '\033[93m'
   DMAG = '\033[35m'
   RED = '\033[91m'
   BOLD = '\033[1m'
   UNDERLINE = '\033[4m'
   END = '\033[0m'
   INR = '\u20b9'               # rupee symbol

# Default amount invested
invst = 300000.00

parser = ArgumentParser()
parser.add_argument("bp", help="Buying price", type=float)
parser.add_argument("sp", help="Selling price (If -p is provided then "\
                    "this argument is ignored)", type=float)
#parser.add_argument("-s", "--sp", help="Selling price", type=float)
parser.add_argument("-c", "--cnt", help="Number of shares", type=int)
parser.add_argument("-a", "--amt", help="Amount invested", type=float)
parser.add_argument("-p", "--dispct", help="Percent amount", type=float)
parser.add_argument("-d", "--detail", help="Print all details",
                    action='store_true')
args = parser.parse_args()

# The colors/symbols we need
blu  = sym.BLUE
bold = sym.BOLD
ru  = sym.INR
cend = sym.END

if args.bp == 0:
    print("Buying price cannot be 0")
    exit(1)

if args.amt:
    invst = args.amt
    units = args.amt/args.bp
elif args.cnt:
    units = args.cnt
    invst = (args.cnt * args.bp)
else:
    units = invst/args.bp

# Selling price can't be < 0 unless -p is specified
if args.sp < 0 and not args.dispct:
   print("Selling price cannot be less than 0")
   exit(1)

if args.sp >= 0 and args.dispct:
   print("The arguments sp and pct are mutually exclusive.")
   exit(1)

# args.sp can be 0
if args.sp >= 0:
   sp = round(units * args.sp, 2)

# if invoked from display_percent, the args.sp will be -1.
def display_vanilla(sp):
   if args.detail and not args.dispct:
      print("Warning: The option -d is compatible only with -p")
   total_sp = round(sp * units)
   pct   = (total_sp/invst) - 1
   ruval = pct * invst
   rdiff = round((sp - args.bp), 2)
   if total_sp < invst:
      colour = sym.RED
   else:
      colour = sym.GREEN

   print ("Invst: "+ blu + bold + ru + str(invst) + cend)
   print ("SellP: "+ colour + bold + f"{ru}{total_sp}" + cend)
   print ("Gn/Lo: "+ colour + bold + ru + str(round(ruval,2)) + cend +
          " ["+ colour + ru + str(rdiff) + cend + "; " + colour +
          str(round(pct*100,2)) + "%" + cend + "]")
   print(f"Units: {round(units, 2)}")
   exit(0)

def display_percent():
   perct = args.dispct

   if perct > 0:
      colour = sym.GREEN
   else:
      colour = sym.RED

   sellp = round(args.bp + ((args.bp/100) * perct), 2)

   print ("Buy prc: "+ blu + bold + ru + str(args.bp) + cend)
   print ("Sel prc: " + colour + bold + f"{ru}{sellp}" + cend)
   print ("Percent: " + colour + bold + f"{perct}%" + cend)

   if args.detail:
      print("----------------")
      display_vanilla(round(sellp, 2))
   exit(0)

if args.sp >=0:
   display_vanilla(args.sp)

if args.dispct:
   display_percent()


