#!/usr/bin/python3

from argparse import ArgumentParser

class sym:
   BLACK = '\033[30m'
   PURPLE = '\033[95m'
   CYAN = '\033[96m'
   DARKCYAN = '\033[36m'
   BLUE = '\033[94m'
   DBLUE = '\033[34m'
   GREEN = '\033[92m'
   YELLOW = '\033[93m'
   DMAG = '\033[35m'
   RED = '\033[91m'
   BOLD = '\033[1m'
   UNDERLINE = '\033[4m'
   END = '\033[0m'
   INR = '\u20b9'               # rupee symbol

# Default amount invested
invst = 300000.00

def validate_and_eval(data):
   try:
      # Strip commas, if any and evaluate
      data = eval(data.replace(",", ""))
      return (data)
   except (SyntaxError, AttributeError):
      msg = "Syntax error: The value should be int/float or an operator \n\
              between int/float. For eg 22+33 or 22-11."
      print(msg)
      exit(1)
   except ZeroDivisionError:
      print("ZeroDivisionError: Can't divide by 0")
      exit(1)
   except NameError:
      # Means, user has entered a character in input
      print("Invalid input: Only numbers and operators +/-/* allowed")
      exit(1)

parser = ArgumentParser()
parser.add_argument("bp", help="Buying price")
parser.add_argument("sp", help="Selling price (If -p is provided then "\
                    "this argument is ignored)")
parser.add_argument("-c", "--cnt", help="Number of shares")
parser.add_argument("-a", "--amt", help="Amount invested")
parser.add_argument("-p", "--dispct", help="Percent amount", type=float)
parser.add_argument("-t", "--tag", help="Tag, placeholder for reverse "\
                    "search")
args = parser.parse_args()

# The colors/symbols we need
blu  = sym.BLUE
bold = sym.BOLD
ru  = sym.INR
cend = sym.END

args.bp = validate_and_eval(args.bp)

if args.bp == 0:
    print("Buying price cannot be 0")
    exit(1)

if args.amt:
    invst = validate_and_eval(args.amt)
    units = invst/args.bp
elif args.cnt:
    units = validate_and_eval(args.cnt)
    invst = (units * args.bp)
else:
    units = invst/args.bp

args.sp = validate_and_eval(args.sp)

# Selling price can't be < 0 unless -p is specified
if args.sp < 0 and not args.dispct:
   print("Selling price cannot be less than 0")
   exit(1)

if args.sp >= 0 and args.dispct:
   print("The arguments sp and pct are mutually exclusive.")
   exit(1)

# args.sp can be 0
if args.sp >= 0:
   sp = round(units * args.sp, 2)

# if invoked from display_percent, the args.sp will be -1.
def display_vanilla(sp):
   total_sp = round(sp * units)
   pct   = (total_sp/invst) - 1
   ruval = pct * invst
   rdiff = round((sp - args.bp), 2)
   if total_sp < invst:
      colour = sym.RED
   else:
      colour = sym.GREEN

   print ("Buy price: " + blu + bold + ru + str(args.bp) +
          cend + "  " + "Sell Price: " + colour + bold +
          ru + str(args.sp) + cend)
   print ("................")
   print ("Invst: "+ blu + bold + ru + str(round(invst,2)) + cend)
   print ("SellP: "+ colour + bold + f"{ru}{total_sp}" + cend)
   print ("Gn/Lo: "+ colour + bold + ru + str(round(ruval,2)) + cend +
          " ["+ colour + ru + str(rdiff) + cend + "; " + colour +
          str(round(pct*100,2)) + "%" + cend + "]")
   print(f"Units: {round(units, 2)}")
   exit(0)

def display_percent():
   perct = args.dispct

   if perct > 0:
      colour = sym.GREEN
   else:
      colour = sym.RED

   args.sp = round(args.bp + (args.bp*(perct/100)), 2)
   sellp = round(args.bp + (args.bp * (perct/100)), 2)

   display_vanilla(round(sellp, 2))
   exit(0)

if args.sp >=0:
   display_vanilla(args.sp)

if args.dispct:
   display_percent()


